/*
 * PDS (Platform Data Set) defines a board's HW configuration
 * Refer to https://github.com/SiliconLabs/wfx-pds/blob/master/README.md for details
 */
 
#include "definitions.in"

// PDS API version
HEADER: {
    VERSION_MAJOR: 2,
    VERSION_MINOR: 4
},

/**********************/
/* Pins configuration */
/**********************/

// Pad configuration of programmable pins
PROG_PINS_CFG: {
    // For each PROGrammable pin in this section
    // SLEW_RATE sets the maximum slew rate on the pin. Type: integer value between 0 and 6 (6=max drive strength)
    // PULL_UP_DOWN allows to add a pull-up or pull-down on the pad. Type: enum = 'none', 'down', 'up'
    // SLEEP_CFG allows to add a pull-up or pull-down on the pad while in sleep mode. Type: enum = 'none', 'down', 'up', 'maintain'
    //          for the case of pads used as gpio it is also possible to maintain the current driven gpio value
    // PIN_MODE allows to configure the pin in tristate, functional mode or gpio. Type: enum = 'tri', 'func', 'gpio'
    // GPIO_ID allows to assign a GPIO_ID to a given pin when configured as gpio. Type = char must be an UPPER case letter
    GPIO_FEM_1: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: A
    },
    GPIO_FEM_2: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: B
    },
    GPIO_FEM_3: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: C
    },
    GPIO_FEM_4: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: D
    },
    GPIO_FEM_5: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: E
    },
    GPIO_FEM_6: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: F
    },
    GPIO_PDET: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: G
    },
    GPIO_PTA_TX_CONF: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: H
    },
    GPIO_PTA_RF_ACT: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: I
    },
    GPIO_PTA_STATUS: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: J
    },
    GPIO_PTA_FREQ: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: tri,
        GPIO_ID: K
    },
    GPIO_WUP: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: func,
        GPIO_ID: L
    },
    GPIO_WIRQ: {
        SLEW_RATE: 4,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none,
        PIN_MODE: func,
        GPIO_ID: M
    }
},

// Pad configuration of HIF pins
HIF_PINS_CFG: {
    // For each HIF pin in this section
    // SLEW_RATE sets the maximum slew rate on the pin. Type: integer value between 0 and 6
    // PULL_UP_DOWN allows to add a pull-up or pull-down on the pad. Type: enum = 'none', 'down', 'up'
    // SLEEP_CFG allows to add a pull-up or pull-down on the pad while in sleep mode. Type: enum = 'none', 'down', 'up'
    SDIO_CLK_SPI_CLK: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_CMD_SPI_MOSI: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_D0_SPI_MISO: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: down
    },
    SDIO_D1_SPI_WIRQ: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_D2_HIF_SEL: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    },
    SDIO_D3_SPI_CSN: {
        SLEW_RATE: 6,
        PULL_UP_DOWN: none,
        SLEEP_CFG: none
    }
},

/***********************/
/* Clock configuration */
/***********************/

HF_CLK: {
    // XTAL_SHARED to indicate if the crystal is shared with another IC and thus must be kept active during sleep
    XTAL_SHARED : no,
    // XTAL_TEMP_COMP to activate or deactivate the temperature compensation "enabled"/"disabled"
    XTAL_TEMP_COMP : disabled
},

/***********************/
/* Power configuration */
/***********************/

// Tx power-related information
RF_POWER_CFG: {
    // Designate the rf port affected by the following configurations 
    // RF_PORT_1, RF_PORT_2, RF_PORT_BOTH(default)
    RF_PORT: RF_PORT_BOTH,
    
    // The max Tx power value in quarters of dBm. Type: signed integer between -128 and 127
    // Resultant covered range in dBm: [-32; 31.75]
    // It is used to limit the Tx power. Thus a value larger than 80 does not make sens.
    MAX_OUTPUT_POWER_QDBM: 80,
    
    // Front-end loss (loss between the chip and the antenna) in quarters of dB.
    // Type: signed integer between -128 and 127
    // Resultant covered range in dB: [-32; 31.75]
    // This value must be positive when the front end attenuates the signal and negative when it amplifies it.
    FRONT_END_LOSS_CORRECTION_QDB: 0,

    // Backoff vs. Modulation Group vs Channel
    // CHANNEL_NUMBER : Designate a channel number(an integer) or a range of channel numbers (an array)
    // CHANNEL_NUMBER : [3, 9] : Channels from 3 to 9
    //
    // BACKOFF_VAL is given in quarters of dB. Type : unsigned integer. Covered range in dB: [0; 63.75]
    // Each value sets a backoff (=additional attenuation) for a group of modulations.
    // A modulation group designates a subset of modulations :
    //   *  MOD_GROUP_0 : B_1Mbps, B_2Mbps, B_5.5Mbps, B_11Mbps
    //   *  MOD_GROUP_1 : G_6Mbps, G_9Mbps, G_12Mbps, N_MCS0,  N_MCS1, 
    //   *  MOD_GROUP_2 : G_18Mbps, G_24Mbps, N_MCS2, N_MCS3, 
    //   *  MOD_GROUP_3 : G_36Mbps, G_48Mbps, N_MCS4, N_MCS5
    //   *  MOD_GROUP_4 : G_54Mbps, N_MCS6
    //   *  MOD_GROUP_5 : N_MCS7
    //   BACKOFF_VAL : [MOD_GROUP_0, ..., MOD_GROUP_5]
    BACKOFF_QDB: [
        {
            CHANNEL_NUMBER : 1,
            BACKOFF_VAL : [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER : [2,3],
            BACKOFF_VAL : [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER : [4, 9],
            BACKOFF_VAL : [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER : [10,12],
            BACKOFF_VAL : [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER : 13,
            BACKOFF_VAL : [0, 0, 0, 0, 0 ,0]
        },
        {
            CHANNEL_NUMBER : 14,
            BACKOFF_VAL : [0, 0, 0, 0, 0 ,0]
        }
    ],

    RSSI_CORRECTION: 0
},

/********************/
/* RF configuration */
/********************/

RF_ANTENNA_SEL_DIV_CFG: {
    //
    // Antenna selection:
    //   - TX1_RX1
    //   - TX2_RX2
    //   - TX1_RX2
    //   - TX2_RX1
    //   - TX12_RX12
    //
    RF_PORTS: TX1_RX1,

    //
    // Diversity control mode:
    //   - OFF
    //   - INTERNAL
    //   - EXTERNAL
    // For the INTERNAL value, RF_PORTS must be set to TX12_RX12
    //
    DIVERSITY: OFF,
},

/*********************/
/* PTA configuration */
/*********************/
/*
PTA_CFG: {
    // PACKET TRAFFIC ARBITRATION (PTA) Mode selection
    // Note: In the whole PTA section, COEX refers to the coexisting standard, sharing the RF with WLAN.
    // * PTA_NONE:           PTA is deactivated,
    // * PTA_1W_WLAN_MASTER: PTA 1-wire interface with WLAN master on PTA_TX_CONF pin (GRANT signal),
    // * PTA_1W_COEX_MASTER: PTA 1-wire interface with COEX master on PTA_RF_ACT pin (REQUEST signal),
    // * PTA_2W:             PTA 2-wire interface on PTA_RF_ACT and PTA_TX_CONF pins (respectively REQUEST and GRANT signals),
    // * PTA_3W:             PTA 3-wire interface on same pins as PTA_MODE_2W, plus PTA_STATUS pin (PRIORITY signal).
    PTA_MODE: PTA_NONE,

    // Active levels on PTA signals. Use one of the following enumerate values : HIGH or LOW
    //   REQUEST signal (PTA_RF_ACT pin):  sets active level on REQUEST signal, provided by COEX to request the RF.
    //   PRIORITY signal (PTA_STATUS pin): sets active level on PRIORITY signal, provided by COEX to set the priority of the request.
    //   FREQ signal (PTA_FREQ pin):       sets active level on FREQ signal, provided by COEX. Will be used in 4-wire PTA when COEX and WLAN share the same band. Currently forced HIGH.
    //   GRANT signal (PTA_TX_CONF pin):   sets active level on GRANT signal, generated by PTA to grant the RF to COEX.
    PTA_REQUEST:  HIGH,
    PTA_PRIORITY: HIGH,
    PTA_FREQ:     HIGH,
    PTA_GRANT:    LOW,

    // PTA interface timings:
    //   PRIORITY_SAMPLING_TIME: time (in us) from REQUEST to the sampling of PRIORITY signal to get priority information (1 to 31),
    //   GRANT_VALID_TIME:       time (in us) from REQUEST to the GRANT signal assertion (1 to 127),
    // Note: PRIORITY_SAMPLING_TIME < GRANT_VALID_TIME must be true.
    PRIORITY_SAMPLING_TIME: 10,
    GRANT_VALID_TIME:       72,

    // PTA arbitration settings:
    //   when set to ON, PROTECT_WLAN_RX prevents COEX from being granted when WLAN is receiving a response to an already transmitted frame.
    //   when set to ON, PROTECT_WLAN_TX prevents COEX from being granted when WLAN is transmitting (the protection is also extended to the response).
    PROTECT_WLAN_RX:  ON,
    PROTECT_WLAN_TX:  OFF,

    //   PROTECT_COEX, GRANT_WLAN, GRANT_COEX, NO_COMBINE shall be kept to the default values below:
    PROTECT_COEX:     ON,
    GRANT_WLAN:       ON,
    GRANT_COEX:       ON,
    NO_COMBINE:       ON,

    // DEFAULT_GRANT_STATE specifies the state of the GRANT signal before arbitration (GRANT_VALID_TIME). Two enumerate values are possible
    // * GRANT:   The PTA grants COEX by default
    // * NOGRANT: COEX is not granted by default
    DEFAULT_GRANT_STATE: GRANT
},

*/
